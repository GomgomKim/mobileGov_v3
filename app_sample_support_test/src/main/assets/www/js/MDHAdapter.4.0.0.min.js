console.log("START to load MDHAdapter.4.0.0.min.js");

var MDHMgr = new function () {
	this.queue = {
		ready: true,
		commands: [],
		timer: null
	};
	this._constructors = [];
	this.available = true;
	this.virtualMode = false;
	this._exec = {};
	this.device = {
		platform: "",
		model: ""
	};
	this.MDH_SUCCESS = 0;
	this.MDH_START_ACTIVITY_FOR_RESULT = 10000;
	this.MDH_INVALID_ARGUMENT = -10001;
	this.MDH_JSON_EXP_ERROR = -10002;
	this.MDH_USER_CANCELED = -10003;
	this.MDH_SIMULATOR_NOT_SUPPORTED = -10004;
	this.MDH_CLASS_NOT_FOUND = -10097;
	this.MDH_NO_SUCH_METHOD = -10098;
	this.MDH_UNKNOWN_ERROR = -10099;
	this.MDH_Basic_LAUNCHER_IS_NOT_INSTALLED = -10100;
	this.MDH_Basic_SSO_SIGN_OFF = -10101;
	this.MDH_Basic_NO_LOCK_PASSWORD = -10102;
	this.MDH_Basic_SCREEN_IS_LOCKED = -10103;
	this.MDH_Basic_SERVICE_IS_BINDING = -10104;
	this.MDH_Basic_LOCK_IS_NOT_MATCHED = -10105;
	this.MDH_Basic_APP_INSTALL_CANCLED = -10106;
	this.MDH_Basic_APP_INSTALL_FAILED = -10107;
	this.MDH_Basic_LOGOUT = -10108;
	this.MDH_Basic_VPN_KEYPAIR_ERROR = -10110;
	this.MDH_Basic_VPN_PROVISION_ERROR = -10111;
	this.MDH_Basic_VPN_CONNECTION_ERROR = -10112;
	this.MDH_Basic_NETWORK_IS_NOT_CONNECTED = -100;
	this.MDH_Basic_USER_ID_OR_MOBILE_ID_IS_NULL = -102;
	this.MDH_Basic_SERVICE_ID_IS_NULL = -103;
	this.MDH_Basic_NO_INPUT_URL = -104;
	this.MDH_Basic_CONNECTION_TIMED_OUT = -107;
	this.MDH_Basic_SERVICE_NOT_FOUND = -108;
	this.MDH_Basic_UNKNOWN_ERROR_FROM_SB = 109;
	this.MDH_Basic_NO_DELEGATE = -110;
	this.MDH_Basic_HOSTNAME_COULD_NOT_BE_FOUND = -111;
	this.MDH_Basic_CONNECTION_ERROR_403 = 403;
	this.MDH_Basic_CONNECTION_ERROR_404 = 404;
	this.MDH_Basic_CONNECTION_ERROR_500 = 500;
	this.MDH_Basic_SAP_SERVER_CONNECT_ERROR = 101;
	this.MDH_Basic_SAP_INVALID_PARAMETER = 102;
	this.MDH_Basic_SAP_RUNTIME_ERROR = 103;
	this.MDH_Basic_DB_RUNTIME_ERROR = 200;
	this.MDH_Basic_AUTH_INVALID_PARAMETER = 900;
	this.MDH_Basic_AUTH_UNREGISTERED_USER = 901;
	this.MDH_Basic_AUTH_FAILED_MOBILE = 902;
	this.MDH_Basic_AUTH_FAILED_USER_INFO = 903;
	this.MDH_Basic_PROV_INVALID_ID_OR_PASSWORD = 904;

	this.init = function () {
		console.log("MDHMgr.init() is callled");
		this.checkDevice();
		this._exec = this["_exec_" + this.device.platform]
	};

	this.initComponents = function () {
		var a = setInterval(function () {
				var c = document.readyState;
				if ((c == "loaded" || c == "complete") && DeviceInfo.uuid != null) {
					clearInterval(a);
					while (MDHMgr._constructors.length > 0) {
						var b = MDHMgr._constructors.shift();
						try {
							b()
						} catch (d) {
							alert("Failed to run constructor: " + d.message)
						}
					}

					var d = document.createEvent("Events");
					d.initEvent("deviceready");
					document.dispatchEvent(d)
				}
			}, 1)
	};

	this.checkDevice = function () {
		if (this.virtualMode === true) {
			this.device.platform = "virtual";
			this.device.model = "virtual";
			return "virtual"
		} else {
			if (navigator.userAgent.toLowerCase().indexOf("iphone") != -1) {
				this.device.platform = "iOS";
				this.device.model = "iphone"
			} else if (navigator.userAgent.toLowerCase().indexOf("ipad") != -1) {
				this.device.platform = "iOS";
				this.device.model = "ipad"
			} else if (navigator.userAgent.toLowerCase().indexOf("android") != -1) {
				this.device.platform = "android";
				this.device.model = "android"
			} else {
				this.device.platform = "virtual";
				this.device.model = "virtual"
			}
		}
	};

	this.addConstructor = function (a) {
		var b = document.readyState;
		if ((b == "loaded" || b == "complete") && DeviceInfo.uuid != null) {
			a()
		} else {
			MDHMgr._constructors.push(a)
		}
	};

	this.exec = function () {
		console.log("exec() is called" + arguments[0]);
		var a = arguments[0] + this.CallbackMgr.callbackId++;
		if (typeof arguments[1] != "function") {
			return
		}
		if (typeof arguments[2] != "function") {
			return
		}
		if (arguments[1] || arguments[2]) {
			this.CallbackMgr.callbacks[a] = {
				success: arguments[1],
				error: arguments[2]
			}
		}

		this._exec(a, arguments);
		return a
	};

	this._exec_virtual = function () {
		console.log("_exec_virtual is NEW called" + arguments.length)
	};

	this._exec_android = function () {
		var b = arguments[0];
		var c = arguments[1][0];
		var a = {};
		if (arguments[1].length > 2) {
			a = arguments[1][3]
		}
		MDHAndroid._exec(b, c, JSON.stringify(a))
	};

	this.run_command = function () {
		if (!MDHMgr.queue.ready) {
			return
		}
		MDHMgr.queue.ready = false;
		if (!this.mdhBridge) {
			this.mdhBridge = document.createElement("iframe");
			this.mdhBridge.setAttribute("style", "display:none;");
			this.mdhBridge.setAttribute("height", "0px");
			this.mdhBridge.setAttribute("width", "0px");
			this.mdhBridge.setAttribute("frameborder", "0");
			document.documentElement.appendChild(this.mdhBridge)
		}
		var c = MDHMgr.queue.commands.shift();

		if (MDHMgr.queue.commands.length == 0) {
			clearInterval(MDHMgr.queue.timer);
			MDHMgr.queue.timer = null
		}

		var e = [];
		var f = null;
		if (c[1].length > 3) {
			for (var d = 3; d < c[1].length; d++) {
				var a = c[1][d];
				if (a == undefined || a == null) {
					a = ""
				}
				if (typeof(a) == "object") {
					f = a
				} else {
					e.push(encodeURIComponent(a))
				}
			}
		}

		var b = "MDHybrid://" + c[1][0] + "/" + c[0] + "/" + e.join("/");
		if (f != null) {
			b += "?" + encodeURIComponent(JSON.stringify(f))
		}
		this.mdhBridge.src = b
	};

	this.log = function (a) {
		this.exec("DebugConsole.log", function () {}, function () {}, a)
	};

	this.CallbackMgr = {};
	this.CallbackMgr.callbackId = 0;
	this.CallbackMgr.callbacks = {};
	this.CallbackMgr.callbackStatus = {
		NO_RESULT: 0,
		OK: 1,
		JSON_EXCEPTION: 8,
		ERROR: 9
	};
	this.CallbackMgr.onSuccess = function (b, a) {
		if (MDHMgr.CallbackMgr.callbacks[b]) {
			if (a.status == MDHMgr.CallbackMgr.callbackStatus.OK) {
				try {
					if (MDHMgr.CallbackMgr.callbacks[b].success) {
						MDHMgr.CallbackMgr.callbacks[b].success(a.message)
					}
				} catch (c) {
					console.log("Error in success callback: " + b + " = " + c)
				}
			}

			if (a.keepCallback == 0) {
				delete MDHMgr.CallbackMgr.callbacks[b]
			}
		}
	};
	this.CallbackMgr.onError = function (b, a) {
		if (MDHMgr.CallbackMgr.callbacks[b]) {
			try {
				if (MDHMgr.CallbackMgr.callbacks[b].error) {
					MDHMgr.CallbackMgr.callbacks[b].error(a.message)
				}
			} catch (c) {
				console.log("Error in error callback: " + b + " = " + c)
			}

			if (a.keepCallback == 0) {
				delete MDHMgr.CallbackMgr.callbacks[b]
			}
		}
	}
};

MDHMgr.init();

MDHBasic = new function () {
	this.constructor = function () {};
	
	this.SSO = new function () {
		this.getInfo = function (a, c, b) {
			MDHMgr.exec("SSO.getInfo", a, c, b)
		}
	};

	this.SEMP = new function () {
		this.request = function (a, b, c) {
			MDHMgr.exec("SEMP.request", a, b, c)
		}
	};
	
	this.Attachment = new function () {
		this.load = function (a, b, c) {
			MDHMgr.exec("DOCViewPlugin.load", a, b, c)
		}
	};
}

console.log("END to load MDHAdapter.4.0.0.min.js");

MDHBoard = new function () {
	this.doBoardRequest = function (onSuccess, onError, param) {
		MDHMgr.exec("BoardPlugin.request", onSuccess, onError, param);
	};

	this.BBS_LIST_SERVICE = "CMM_CPNT_BBS_LIST";
	this.getBoardList = function (onSuccess, onError, pageIndex, searchCnd, searchWrd) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_LIST_SERVICE + "",
			"pageIndex": "" + pageIndex + "",
			"searchCnd": "" + searchCnd + "",
			"searchWrd": "" + searchWrd + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_DETAIL_SERVICE = "CMM_CPNT_BBS_DETAIL";
	this.getBoardDetail = function (onSuccess, onError, nttId) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_DETAIL_SERVICE + "",
			"nttId": "" + nttId + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_SAVE_SERVICE = "CMM_CPNT_BBS_SAVE";
	this.postRegist = function (onSuccess, onError, nttSj, nttCn, filePath) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_SAVE_SERVICE + "",
			"nttSj": "" + nttSj + "",
			"nttCn": "" + nttCn + "",
			"filePath": "" + filePath + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_REPLY_SAVE_SERVICE = "CMM_CPNT_BBS_REPLY_SAVE";
	this.replyRegist = function (onSuccess, onError, nttSj, nttCn, nttId,
		sortOrdr, replyLc, filePath) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_REPLY_SAVE_SERVICE + "",
			"nttSj": "" + nttSj + "",
			"nttCn": "" + nttCn + "",
			"nttId": "" + nttId + "",
			"sortOrdr": "" + sortOrdr + "",
			"replyLc": "" + replyLc + "",
			"filePath": "" + filePath + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_MODIFY_SERVICE = "CMM_CPNT_BBS_MODIFY";
	this.postEdit = function (onSuccess, onError, nttSj, nttCn, nttId, filePath) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_MODIFY_SERVICE + "",
			"nttSj": "" + nttSj + "",
			"nttCn": "" + nttCn + "",
			"nttId": "" + nttId + "",
			"filePath": "" + filePath + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_REMOVE_SERVICE = "CMM_CPNT_BBS_REMOVE";
	this.postDelete = function (onSuccess, onError, nttId) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_REMOVE_SERVICE + "",
			"nttId": "" + nttId + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_COMMENT_LIST_SERVICE = "CMM_CPNT_BBS_COMMENT_LIST";
	this.getPostReplyList = function (onSuccess, onError, nttId) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_COMMENT_LIST_SERVICE + "",
			"nttId": "" + nttId + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_COMMENT_SAVE_SERVICE = "CMM_CPNT_BBS_COMMENT_SAVE";
	this.postReplyRegist = function (onSuccess, onError, nttId, commentCn) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_COMMENT_SAVE_SERVICE + "",
			"nttId": "" + nttId + "",
			"commentCn": "" + commentCn + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_COMMENT_REMOVE_SERVICE = "CMM_CPNT_BBS_COMMENT_REMOVE";
	this.postReplyDelete = function (onSuccess, onError, commentNo) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_COMMENT_REMOVE_SERVICE + "",
			"commentNo": "" + commentNo + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_COMMENT_MODIFY_SERVICE = "CMM_CPNT_BBS_COMMENT_MODIFY";
	this.postReplyModify = function (onSuccess, onError, commentNo, commentCn) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_COMMENT_MODIFY_SERVICE + "",
			"commentNo": "" + commentNo + "",
			"commentCn": "" + commentCn + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};

	this.BBS_FILE_LIST_SERVICE = "CMM_CPNT_BBS_FILE_LIST";
	this.getAttachFileList = function (onSuccess, onError, atchFileId) {
		var parameter = {
			"subService": "" + MDHBoard.BBS_FILE_LIST_SERVICE + "",
			"atchFileId": "" + atchFileId + ""
		};
		this.doBoardRequest(onSuccess, onError, parameter)
	};
}

MDHFamilyEvent = new function () {
	this.doFamilyEventRequest = function (onSuccess, onError, param) {
		MDHMgr.exec("FamilyEventPlugin.request", onSuccess, onError, param);
	};

	this.FMEV_LIST_SERVICE = "CMM_CPNT_FMEV_LIST";
	this.getFamilyEventList = function (onSuccess, onError, pageIndex, searchCnd, searchWrd) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_LIST_SERVICE + "",
			"pageIndex": "" + pageIndex + "",
			"searchCnd": "" + searchCnd + "",
			"searchWrd": "" + searchWrd + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};

	this.FMEV_DETAIL_SERVICE = "CMM_CPNT_FMEV_DETAIL";
	this.getFamilyEventDetail = function (onSuccess, onError, nttId) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_DETAIL_SERVICE + "",
			"nttId": "" + nttId + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};

	this.FMEV_SAVE_SERVICE = "CMM_CPNT_FMEV_SAVE";
	this.postRegist = function (onSuccess, onError, args, args2, args3) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_SAVE_SERVICE + "",
			"nttSj": "" + args + "",
			"nttCn": "" + args2 + "",
			"filePath": "" + args3 + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};

	this.FMEV_MODIFY_SERVICE = "CMM_CPNT_FMEV_MODIFY";
	this.postEdit = function (onSuccess, onError, nttSj, nttCn, nttId, filePath) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_MODIFY_SERVICE + "",
			"nttSj": "" + nttSj + "",
			"nttCn": "" + nttCn + "",
			"nttId": "" + nttId + "",
			"filePath": "" + filePath + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};

	this.FMEV_REMOVE_SERVICE = "CMM_CPNT_FMEV_REMOVE";
	this.postDelete = function (onSuccess, onError, nttId) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_REMOVE_SERVICE + "",
			"nttId": "" + nttId + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};

	this.FMEV_COMMENT_LIST_SERVICE = "CMM_CPNT_FMEV_COMMENT_LIST";
	this.getPostReplyList = function (onSuccess, onError, nttId) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_COMMENT_LIST_SERVICE + "",
			"nttId": "" + nttId + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};

	this.FMEV_COMMENT_SAVE_SERVICE = "CMM_CPNT_FMEV_COMMENT_SAVE";
	this.postReplyRegist = function (onSuccess, onError, nttId, commentCn) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_COMMENT_SAVE_SERVICE + "",
			"nttId": "" + nttId + "",
			"commentCn": "" + commentCn + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};

	this.FMEV_COMMENT_REMOVE_SERVICE = "CMM_CPNT_FMEV_COMMENT_REMOVE";
	this.postReplyDelete = function (onSuccess, onError, commentNo) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_COMMENT_REMOVE_SERVICE + "",
			"commentNo": "" + commentNo + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};

	this.FMEV_COMMENT_MODIFY_SERVICE = "CMM_CPNT_FMEV_COMMENT_MODIFY";
	this.postReplyModify = function (onSuccess, onError, commentNo, commentCn) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_COMMENT_MODIFY_SERVICE + "",
			"commentNo": "" + commentNo + "",
			"commentCn": "" + commentCn + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};

	this.FMEV_FILE_LIST_SERVICE = "CMM_CPNT_FMEV_FILE_LIST";
	this.getAttachFileList = function (onSuccess, onError, atchFileId) {
		var parameter = {
			"subService": "" + MDHFamilyEvent.FMEV_FILE_LIST_SERVICE + "",
			"atchFileId:": "" + atchFileId + ""
		};
		this.doFamilyEventRequest(onSuccess, onError, parameter)
	};
}

MDHNotice = new function () {
	this.doNoticeRequest = function (onSuccess, onError, param) {
		MDHMgr.exec("NoticePlugin.request", onSuccess, onError, param);
	};

	this.NTC_LIST_SERVICE = "CMM_CPNT_NTC_LIST";
	this.getNoticeList = function (onSuccess, onError, pageIndex, searchCnd, searchWrd) {
		var parameter = {
			"subService": "" + MDHNotice.NTC_LIST_SERVICE + "",
			"pageIndex": "" + pageIndex + "",
			"searchCnd": "" + searchCnd + "",
			"searchWrd": "" + searchWrd + ""
		};
		this.doNoticeRequest(onSuccess, onError, parameter)
	};

	this.NTC_DETAIL_SERVICE = "CMM_CPNT_NTC_DETAIL";
	this.getNoticeDetail = function (onSuccess, onError, nttId) {
		var parameter = {
			"subService": "" + MDHNotice.NTC_DETAIL_SERVICE + "",
			"nttId": "" + nttId + ""
		};
		this.doNoticeRequest(onSuccess, onError, parameter)
	};

	this.NTC_SAVE_SERVICE = "CMM_CPNT_NTC_SAVE";
	this.noticeRegist = function (onSuccess, onError, nttSj, nttCn, filePath) {
		var parameter = {
			"subService": "" + MDHNotice.NTC_SAVE_SERVICE + "",
			"nttSj": "" + nttSj + "",
			"nttCn": "" + nttCn + "",
			"filePath": "" + filePath + ""
		};
		this.doNoticeRequest(onSuccess, onError, parameter)
	};

	this.NTC_MODIFY_SERVICE = "CMM_CPNT_NTC_MODIFY";
	this.noticeEdit = function (onSuccess, onError, nttSj, nttCn, nttId, filePath) {
		var parameter = {
			"subService": "" + MDHNotice.NTC_MODIFY_SERVICE + "",
			"nttSj": "" + nttSj + "",
			"nttCn": "" + nttCn + "",
			"nttId": "" + nttId + "",
			"filePath": "" + filePath + ""
		};
		this.doNoticeRequest(onSuccess, onError, parameter)
	};

	this.NTC_REMOVE_SERVICE = "CMM_CPNT_NTC_REMOVE";
	this.noticeDelete = function (onSuccess, onError, nttId) {
		var parameter = {
			"subService": "" + MDHNotice.NTC_REMOVE_SERVICE + "",
			"nttId": "" + nttId + ""
		};
		this.doNoticeRequest(onSuccess, onError, parameter)
	};
}

MDHUser = new function () {
	this.doUserRequest = function (onSuccess, onError, param) {
		MDHMgr.exec("UserPlugin.request", onSuccess, onError, param);
	};

	this.FIND_ORG_DN_SERVICE = "CMM_CPNT_ORMB_FIND_ORG_DN";
	this.getOrgDetailWithDN = function (onSuccess, onError, dn) {
		var parameter = {
			"subService": "" + MDHUser.FIND_ORG_DN_SERVICE + "",
			"dn": "" + dn + ""
		};
		this.doUserRequest(onSuccess, onError, parameter)
	};

	this.FIND_ORG_OUCODE_SERVICE = "CMM_CPNT_ORMB_FIND_ORG_OUCODE";
	this.getOrgDetailWithOU = function (onSuccess, onError, ouCode) {
		var parameter = {
			"subService": "" + MDHUser.FIND_ORG_OUCODE_SERVICE + "",
			"ouCode": "" + ouCode + ""
		};
		this.doUserRequest(onSuccess, onError, parameter)
	};

	this.FIND_ORG_USER_TOP_SERVICE = "CMM_CPNT_ORMB_FIND_ORG_USER_TOP";
	this.getUserTopOrg = function (onSuccess, onError, cn, ouCode) {
		var parameter = {
			"subService": "" + MDHUser.FIND_ORG_USER_TOP_SERVICE + "",
			"cn": "" + cn + "",
			"ouCode": "" + ouCode + ""
		};
		this.doUserRequest(onSuccess, onError, parameter)
	};

	this.FIND_SUB_ORG_SERVICE = "CMM_CPNT_ORMB_FIND_SUB_ORG";
	this.getSubOrgList = function (onSuccess, onError, dn) {
		var parameter = {
			"subService": "" + MDHUser.FIND_SUB_ORG_SERVICE + "",
			"dn": "" + dn + ""
		};
		this.doUserRequest(onSuccess, onError, parameter)
	};

	this.FIND_USER_DN_SERVICE = "CMM_CPNT_ORMB_FIND_USER_DN";
	this.getUserDetailInfo = function (onSuccess, onError, dn) {
		var parameter = {
			"subService": "" + MDHUser.FIND_USER_DN_SERVICE + "",
			"dn": "" + dn + ""
		};
		this.doUserRequest(onSuccess, onError, parameter)
	};

	this.FIND_USER_CN_OUCODE_SERVICE = "CMM_CPNT_ORMB_FIND_USER_CN_OUCODE";
	this.getUserDetailInfoCN = function (onSuccess, onError, cn, ouCode) {
		var parameter = {
			"subService": "" + MDHUser.FIND_USER_CN_OUCODE_SERVICE + "",
			"cn": "" + cn + "",
			"ouCode": "" + ouCode + ""
		};
		this.doUserRequest(onSuccess, onError, parameter)
	};

	this.FIND_SUB_USER_SERVICE = "CMM_CPNT_ORMB_FIND_SUB_USER";
	this.getOrgUserList = function (onSuccess, onError, dn) {
		var parameter = {
			"subService": "" + MDHUser.FIND_SUB_USER_SERVICE + "",
			"dn": "" + dn + ""
		};
		this.doUserRequest(onSuccess, onError, parameter)
	};

	this.SEARCH_ORG_SERVICE = "CMM_CPNT_ORMB_SEARCH_ORG";
	this.getOrg = function (onSuccess, onError, ou, ouCode) {
		var parameter = {
			"subService": "" + MDHUser.SEARCH_ORG_SERVICE + "",
			"ou": "" + ou + "",
			"ouCode": "" + ouCode + ""
		};
		this.doUserRequest(onSuccess, onError, parameter)
	};

	this.SEARCH_USER_SERVICE = "CMM_CPNT_ORMB_SEARCH_USER";
	this.search = function (onSuccess, onError, cn, ouCode) {
		var parameter = {
			"subService": "" + MDHUser.SEARCH_USER_SERVICE + "",
			"cn": "" + cn + "",
			"ouCode": "" + ouCode + ""
		};
		this.doUserRequest(onSuccess, onError, parameter)
	};
}

MDHMail = new function () {
	this.doMailRequest = function (onSuccess, onError, param) {
		MDHMgr.exec("MailPlugin.request", onSuccess, onError, param);
	};
	
	this.MAIL_LIST_SERVICE = "CMM_CPNT_MAIL_LIST";
	this.getMailList = function (onSuccess, onError, type, host, port, sslYn, id, passwd) {
		var parameter = {
			"subService": "" + MDHMail.MAIL_LIST_SERVICE + "",
			"type": "" + type + "",
			"host": "" + host + "",
			"port": "" + port + "",
			"sslYn": "" + sslYn + "",
			"id": "" + id + "",
			"passwd": "" + passwd + ""
		};
		this.doMailRequest(onSuccess, onError, parameter)
	};
}

MDHEtc = new function () {
	this.fileChooser = function (onSuccess, onError) {
		MDHMgr.exec("FileChooserPlugin.request", onSuccess, onError);
	};
}